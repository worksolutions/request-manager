{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended-type-checked",
    "plugin:@typescript-eslint/stylistic-type-checked"
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": [
    "@typescript-eslint"
  ],
  "parserOptions": {
    "project": "./tsconfig.json",
    "sourceType": "module"
  },
  "root": true,
  "rules": {
    // @typescript-eslint
    "@typescript-eslint/array-type": "error",
    "@typescript-eslint/await-thenable": "error",
    "@typescript-eslint/ban-ts-comment": "error",
    "@typescript-eslint/ban-tslint-comment": "error",
    "@typescript-eslint/ban-types": "error",
    "@typescript-eslint/block-spacing": "error",
    "@typescript-eslint/brace-style": "error",
    "@typescript-eslint/consistent-generic-constructors": "off",
    "@typescript-eslint/consistent-type-exports": "error",
    "@typescript-eslint/default-param-last": "error",
    "@typescript-eslint/explicit-function-return-type": [
      "error",
      {
        "allowExpressions": true,
        "allowTypedFunctionExpressions": true,
        "allowHigherOrderFunctions": true,
        "allowDirectConstAssertionInArrowFunctions": false,
        "allowConciseArrowFunctionExpressionsStartingWithVoid": false,
        "allowFunctionsWithoutTypeParameters": true,
        "allowIIFEs": false
      }
    ],
    "@typescript-eslint/explicit-member-accessibility": [
      "error",
      {
        "accessibility": "explicit",
        "overrides": {
          "accessors": "explicit",
          "constructors": "no-public",
          "methods": "explicit",
          "properties": "explicit",
          "parameterProperties": "explicit"
        }
      }
    ],
    "@typescript-eslint/max-params": [
      "error",
      {
        "max": 3
      }
    ],
    "@typescript-eslint/member-ordering": [
      "error",
      {
        "default": [
          // Index signature
          "signature",
          "call-signature",
          // Fields
          "public-static-field",
          "static-field",
          "protected-static-field",
          "private-static-field",
          "#private-static-field",
          "public-abstract-field",
          "abstract-field",
          // "public-decorated-field",
          // "decorated-field",
          "public-instance-field",
          "instance-field",
          "public-field",
          "field",
          "protected-abstract-field",
          // "protected-decorated-field",
          "protected-instance-field",
          "protected-field",
          // "private-decorated-field",
          "private-instance-field",
          "private-field",
          "#private-instance-field",
          "#private-field",
          // Static initialization
          "static-initialization",
          // Constructors
          "public-constructor",
          "constructor",
          "protected-constructor",
          "private-constructor",
          // Accessors
          "public-static-accessor",
          "static-accessor",
          "protected-static-accessor",
          "private-static-accessor",
          "#private-static-accessor",
          "public-abstract-accessor",
          "abstract-accessor",
          // "public-decorated-accessor",
          // "decorated-accessor",
          "public-instance-accessor",
          "instance-accessor",
          "public-accessor",
          "accessor",
          "protected-abstract-accessor",
          // "protected-decorated-accessor",
          "protected-instance-accessor",
          "protected-accessor",
          // "private-decorated-accessor",
          "private-instance-accessor",
          "private-accessor",
          "#private-instance-accessor",
          "#private-accessor",
          // Getters
          "public-static-get",
          "static-get",
          "protected-static-get",
          "private-static-get",
          "#private-static-get",
          "public-abstract-get",
          "abstract-get",
          // "public-decorated-get",
          // "decorated-get",
          "public-instance-get",
          "instance-get",
          "public-get",
          "get",
          "protected-abstract-get",
          // "protected-decorated-get",
          "protected-instance-get",
          "protected-get",
          // "private-decorated-get",
          "private-instance-get",
          "private-get",
          "#private-instance-get",
          "#private-get",
          // Setters
          "public-static-set",
          "static-set",
          "protected-static-set",
          "private-static-set",
          "#private-static-set",
          "public-abstract-set",
          "abstract-set",
          // "public-decorated-set",
          // "decorated-set",
          "public-instance-set",
          "instance-set",
          "public-set",
          "set",
          "protected-abstract-set",
          // "protected-decorated-set",
          "protected-instance-set",
          "protected-set",
          // "private-decorated-set",
          "private-instance-set",
          "private-set",
          "#private-instance-set",
          "#private-set",
          // Methods
          "public-static-method",
          "static-method",
          "protected-static-method",
          "private-static-method",
          "#private-static-method",
          "public-abstract-method",
          "abstract-method",
          // "public-decorated-method",
          // "decorated-method",
          "public-instance-method",
          "instance-method",
          "public-method",
          "method",
          "protected-abstract-method",
          // "protected-decorated-method",
          "protected-instance-method",
          "protected-method",
          // "private-decorated-method",
          "private-instance-method",
          "private-method",
          "#private-instance-method",
          "#private-method"
        ]
      }
    ],
    "@typescript-eslint/method-signature-style": "error",
    "@typescript-eslint/no-array-constructor": "error",
    "@typescript-eslint/no-base-to-string": "error",
    "@typescript-eslint/no-confusing-non-null-assertion": "error",
    "@typescript-eslint/no-confusing-void-expression": [
      "error",
      {
        "ignoreArrowShorthand": true,
        "ignoreVoidOperator": false
      }
    ],
    "@typescript-eslint/no-duplicate-enum-values": "error",
    "@typescript-eslint/no-duplicate-type-constituents": "error",
    "@typescript-eslint/no-dynamic-delete": "error",
    "@typescript-eslint/no-empty-function": "error",
    "@typescript-eslint/no-empty-interface": "error",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-extra-semi": "error",
    "@typescript-eslint/no-extraneous-class": "error",
    "@typescript-eslint/no-floating-promises": "error",
    "@typescript-eslint/no-for-in-array": "error",
    "@typescript-eslint/no-implied-eval": "error",
    "@typescript-eslint/no-import-type-side-effects": "error",
    "@typescript-eslint/no-inferrable-types": [
      "error",
      {
        "ignoreParameters": true,
        "ignoreProperties": true
      }
    ],
    "@typescript-eslint/no-invalid-void-type": "error",
    "@typescript-eslint/no-loop-func": "error",
    "@typescript-eslint/no-loss-of-precision": "error",
    "@typescript-eslint/no-meaningless-void-operator": "error",
    "@typescript-eslint/no-misused-new": "error",
    "@typescript-eslint/no-misused-promises": [
      "error",
      {
        "checksConditionals": true,
        "checksSpreads": true,
        "checksVoidReturn": {
          "arguments": true,
          "attributes": false,
          "properties": false,
          "returns": true,
          "variables": true
        }
      }
    ],
    "@typescript-eslint/no-mixed-enums": "error",
    "@typescript-eslint/no-namespace": "error",
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
    "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/no-redundant-type-constituents": "error",
    "@typescript-eslint/no-require-imports": "error",
    "@typescript-eslint/no-restricted-imports": "error",
    "@typescript-eslint/no-shadow": "error",
    "@typescript-eslint/no-this-alias": "error",
    "@typescript-eslint/no-throw-literal": "error",
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
    "@typescript-eslint/no-unnecessary-condition": "error",
    "@typescript-eslint/no-unnecessary-qualifier": "error",
    "@typescript-eslint/no-unnecessary-type-arguments": "error",
    "@typescript-eslint/no-unnecessary-type-assertion": "error",
    "@typescript-eslint/no-unnecessary-type-constraint": "error",
    "@typescript-eslint/no-unsafe-argument": "off",
    "@typescript-eslint/no-unsafe-assignment": "error",
    "@typescript-eslint/no-unsafe-call": "error",
    "@typescript-eslint/no-unsafe-declaration-merging": "error",
    "@typescript-eslint/no-unsafe-enum-comparison": "error",
    "@typescript-eslint/no-unsafe-member-access": "error",
    "@typescript-eslint/no-unsafe-return": "error",
    "@typescript-eslint/no-unsafe-unary-minus": "error",
    "@typescript-eslint/no-unused-expressions": "error",
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/no-use-before-define": "error",
    "@typescript-eslint/no-useless-constructor": "error",
    "@typescript-eslint/no-useless-empty-export": "error",
    "@typescript-eslint/no-var-requires": "error",
    "@typescript-eslint/prefer-as-const": "error",
    "@typescript-eslint/prefer-enum-initializers": "error",
    "@typescript-eslint/prefer-for-of": "error",
    "@typescript-eslint/prefer-function-type": "error",
    "@typescript-eslint/prefer-includes": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "@typescript-eslint/prefer-readonly": "error",
    "@typescript-eslint/prefer-reduce-type-parameter": "error",
    "@typescript-eslint/prefer-regexp-exec": "error",
    "@typescript-eslint/prefer-string-starts-ends-with": "error",
    "@typescript-eslint/promise-function-async": "error",
    "@typescript-eslint/require-await": "error",
    "@typescript-eslint/restrict-plus-operands": "error",
    "@typescript-eslint/restrict-template-expressions": "error",
    "@typescript-eslint/return-await": "error",
    "@typescript-eslint/switch-exhaustiveness-check": "error",
    "@typescript-eslint/unbound-method": "error",
    "@typescript-eslint/unified-signatures": "error",
    "@typescript-eslint/typedef": [
      "error",
      {
        "arrayDestructuring": false,
        "arrowParameter": false,
        "memberVariableDeclaration": true,
        "objectDestructuring": false,
        "parameter": false,
        "propertyDeclaration": true,
        "variableDeclarationIgnoreFunction": true,
        "variableDeclaration": false
      }
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": [
          "accessor",
          "classMethod",
          "classProperty",
          "typeProperty",
          "typeMethod"
        ],
        "format": [
          "camelCase"
        ],
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },
      {
        "selector": [
          "variable",
          "objectLiteralMethod",
          "objectLiteralProperty",
          "parameterProperty",
          "parameter",
          "function",
          "typeParameter"
        ],
        "format": [
          "camelCase",
          "PascalCase"
        ]
      },
      {
        "selector": [
          "parameter"
        ],
        "format": [
          "camelCase",
          "PascalCase"
        ],
        "filter": {
          "regex": "_",
          "match": true
        },
        "leadingUnderscore": "allow"
      },
      {
        "selector": [
          "class",
          "interface",
          "typeAlias"
        ],
        "format": [
          "PascalCase"
        ]
      },
      {
        "selector": [
          "accessor",
          "parameterProperty",
          "classProperty",
          "classMethod"
        ],
        "modifiers": [
          "private"
        ],
        "format": [
          "camelCase"
        ],
        "leadingUnderscore": "require"
      },
      {
        "selector": [
          "accessor",
          "parameterProperty",
          "classProperty",
          "classMethod"
        ],
        "modifiers": [
          "protected"
        ],
        "format": [
          "camelCase"
        ],
        "leadingUnderscore": "require"
      },
      {
        "selector": "enum",
        "format": [
          "PascalCase"
        ],
        "custom": {
          "regex": "[A-Z]Enum$",
          "match": false
        }
      },
      {
        "selector": "enumMember",
        "format": [
          "UPPER_CASE"
        ]
      },
      {
        "selector": "interface",
        "format": [
          "PascalCase"
        ],
        "custom": {
          "regex": "^I[A-Z]",
          "match": false
        }
      },
      {
        "selector": "variable",
        "types": [
          "boolean"
        ],
        "format": [
          "PascalCase"
        ],
        "prefix": [
          "is",
          "should",
          "has",
          "can",
          "did",
          "will"
        ]
      },
      {
        "selector": [
          "variable",
          "classProperty"
        ],
        "types": [
          "boolean",
          "number",
          "string"
        ],
        "format": [
          "camelCase",
          "UPPER_CASE"
        ]
      }
    ],
    // eslint
    "block-spacing": "off",
    "brace-style": "off",
    "camelcase": "off",
    "complexity": [
      "error",
      {
        "max": 10
      }
    ],
    "default-param-last": "off",
    "max-len": [
      "error",
      {
        "code": 120,
        "ignoreStrings": true,
        "ignoreTrailingComments": true,
        "ignoreUrls": true,
        "ignoreRegExpLiterals": true
      }
    ],
    "max-params": "off",
    "no-array-constructor": "off",
    "no-empty-function": "off",
    "no-extra-semi": "off",
    "no-implied-eval": "off",
    "no-loop-func": "off",
    "no-loss-of-precision": "off",
    "no-magic-numbers": "off",
    "no-restricted-imports": "off",
    "no-return-await": "off",
    "no-shadow": "off",
    "no-throw-literal": "off",
    "no-unused-expressions": "off",
    "no-unused-vars": "off",
    "no-use-before-define": "off",
    "no-useless-constructor": "off",
    "require-await": "off"
  }
}